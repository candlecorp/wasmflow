{
  "title": "Wick configuration",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "$defs": {
    "v0": {
      "HostManifest": {
        "$anchor": "#v0/HostManifest",
        "additionalProperties": false,
        "properties": {
          "format": {
            "description": "The configuration manifest format.",
            "enum": [
              0
            ]
          },
          "version": {
            "description": "The version of the configuration.",
            "type": "string"
          },
          "host": {
            "description": "Additional host configuration.",
            "required": false,
            "$ref": "#/$defs/v0/HostConfig"
          },
          "network": {
            "description": "The configuration for a Wick network.",
            "$ref": "#/$defs/v0/NetworkManifest"
          },
          "default_schematic": {
            "description": "The default schematic to execute if none is provided.",
            "required": false,
            "type": "string"
          }
        },
        "required": [
          "format"
        ]
      },
      "HostConfig": {
        "$anchor": "#v0/HostConfig",
        "additionalProperties": false,
        "properties": {
          "allow_latest": {
            "description": "Whether or not to allow the :latest tag on remote artifacts.",
            "type": "boolean"
          },
          "insecure_registries": {
            "description": "A list of registries to connect to insecurely (over HTTP vs HTTPS).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "description": "The ID for this host, used to identify the host over the mesh.",
            "required": false,
            "type": "string"
          },
          "expose": {
            "description": "The schematics to expose via RPC or the mesh, if any.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mesh": {
            "description": "The mesh configuration.",
            "required": false,
            "$ref": "#/$defs/v0/MeshConfig"
          },
          "rpc": {
            "description": "Configuration for the GRPC server.",
            "required": false,
            "$ref": "#/$defs/v0/HttpConfig"
          },
          "http": {
            "description": "Configuration for the HTTP 1 server (development only).",
            "required": false,
            "$ref": "#/$defs/v0/HttpConfig"
          }
        },
        "required": []
      },
      "HttpConfig": {
        "$anchor": "#v0/HttpConfig",
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "description": "Enable/disable the server.",
            "type": "boolean"
          },
          "port": {
            "description": "The port to bind to.",
            "required": false,
            "type": "number"
          },
          "address": {
            "description": "The address to bind to.",
            "required": false,
            "type": "string"
          },
          "pem": {
            "description": "Path to pem file for TLS.",
            "required": false,
            "type": "string"
          },
          "key": {
            "description": "Path to key file for TLS.",
            "required": false,
            "type": "string"
          },
          "ca": {
            "description": "Path to CA file.",
            "required": false,
            "type": "string"
          }
        },
        "required": []
      },
      "MeshConfig": {
        "$anchor": "#v0/MeshConfig",
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "description": "Enable/disable the mesh connection.",
            "type": "boolean"
          },
          "address": {
            "description": "The address of the NATS server.",
            "type": "string"
          },
          "creds_path": {
            "description": "The path to the NATS credsfile.",
            "required": false,
            "type": "string"
          },
          "token": {
            "description": "The NATS token.",
            "required": false,
            "type": "string"
          }
        },
        "required": []
      },
      "NetworkManifest": {
        "$anchor": "#v0/NetworkManifest",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "The unique identifier for this Network.",
            "required": false,
            "type": "string"
          },
          "triggers": {
            "description": "The collection to use as the entrypoint when running as a standalone process.",
            "required": false,
            "$ref": "#/$defs/v0/EntrypointDefinition"
          },
          "schematics": {
            "description": "The links between capabilities and components.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v0/SchematicManifest"
            }
          },
          "collections": {
            "description": "A list of component collections.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v0/CollectionDefinition"
            }
          }
        },
        "required": []
      },
      "EntrypointDefinition": {
        "$anchor": "#v0/EntrypointDefinition",
        "additionalProperties": false,
        "properties": {
          "reference": {
            "description": "The reference/location of the collection.",
            "type": "string"
          },
          "component": {
            "description": "The component to use as the entrypoint.",
            "type": "string"
          },
          "data": {
            "description": "Data or configuration used to initialize the collection.",
            "required": false,
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "object"
                  },
                  {
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            }
          }
        },
        "required": []
      },
      "CollectionDefinition": {
        "$anchor": "#v0/CollectionDefinition",
        "additionalProperties": false,
        "properties": {
          "namespace": {
            "description": "The local namespace for the collection.",
            "type": "string"
          },
          "kind": {
            "description": "The kind/type of the collection.",
            "$ref": "#/$defs/v0/CollectionKind"
          },
          "reference": {
            "description": "The reference/location of the collection.",
            "type": "string"
          },
          "data": {
            "description": "Data or configuration used to initialize the collection.",
            "required": false,
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "object"
                  },
                  {
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            }
          }
        },
        "required": []
      },
      "CollectionKind": {
        "$anchor": "#v0/CollectionKind",
        "enum": [
          "Native",
          "GrpcUrl",
          "WaPC",
          "Network"
        ]
      },
      "SchematicManifest": {
        "$anchor": "#v0/SchematicManifest",
        "additionalProperties": false,
        "properties": {
          "name": {
            "description": "Schematic name.",
            "type": "string"
          },
          "instances": {
            "description": "A map from component reference to its target.",
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "$ref": "#/$defs/v0/ComponentDefinition"
              }
            }
          },
          "connections": {
            "description": "A list of connections from component to component.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v0/ConnectionDefinition"
            }
          },
          "constraints": {
            "description": "A map of constraints and values that limit where this schematic can run.",
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "ComponentDefinition": {
        "$anchor": "#v0/ComponentDefinition",
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "The ID of the component (i.e. the alias, key, or namespace).",
            "type": "string"
          },
          "data": {
            "description": "Data to associate with the reference.",
            "required": false,
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "object"
                  },
                  {
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            }
          }
        },
        "required": [
          "id"
        ]
      },
      "ConnectionDefinition": {
        "$anchor": "#v0/ConnectionDefinition",
        "additionalProperties": false,
        "properties": {
          "from": {
            "description": "The originating component from upstream.",
            "$ref": "#/$defs/v0/ConnectionTargetDefinition"
          },
          "to": {
            "description": "The destination component (downstream).",
            "$ref": "#/$defs/v0/ConnectionTargetDefinition"
          }
        },
        "required": []
      },
      "ConnectionTargetDefinition": {
        "$anchor": "#v0/ConnectionTargetDefinition",
        "additionalProperties": false,
        "properties": {
          "instance": {
            "description": "The instance name of the referenced component.",
            "type": "string"
          },
          "port": {
            "description": "The component&#x27;s port.",
            "type": "string"
          },
          "data": {
            "description": "Data to associate with a connection.",
            "required": false,
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "object"
                  },
                  {
                    "type": "array"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  }
                ]
              }
            }
          }
        },
        "required": [
          "instance",
          "port"
        ]
      }
    },
    "v1": {
      "WickConfig": {
        "oneOf": [
          {
            "$ref": "#/$defs/v1/AppConfiguration"
          },
          {
            "$ref": "#/$defs/v1/ComponentConfiguration"
          },
          {
            "$ref": "#/$defs/v1/TypesConfiguration"
          },
          {
            "$ref": "#/$defs/v1/TestConfiguration"
          }
        ]
      },
      "LocationReference": {
        "type": "string"
      },
      "LiquidJsonValue": {
        "oneOf": [
          {
            "type": "boolean"
          },
          {
            "type": "object"
          },
          {
            "type": "array"
          },
          {
            "type": "string"
          },
          {
            "type": "number"
          }
        ]
      },
      "LiquidTemplate": {
        "type": "string"
      },
      "Glob": {
        "type": "string"
      },
      "AppConfiguration": {
        "$anchor": "#v1/AppConfiguration",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/app@v1"
            ]
          },
          "name": {
            "description": "The application&#x27;s name.",
            "type": "string"
          },
          "metadata": {
            "description": "Associated metadata for this component.",
            "required": false,
            "$ref": "#/$defs/v1/Metadata"
          },
          "package": {
            "description": "Details about the package for this application.",
            "required": false,
            "$ref": "#/$defs/v1/PackageDefinition"
          },
          "resources": {
            "description": "Resources and configuration that the application and its components can access.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/ResourceBinding"
            }
          },
          "import": {
            "description": "Components that to import and make available to the application.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/ImportBinding"
            }
          },
          "triggers": {
            "description": "Triggers to load and instantiate to drive the application&#x27;s behavior.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/TriggerDefinition"
            }
          }
        },
        "required": []
      },
      "Metadata": {
        "$anchor": "#v1/Metadata",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "version": {
            "description": "The version of the artifact.",
            "type": "string"
          },
          "authors": {
            "description": "A list of the authors.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "vendors": {
            "description": "A list of any vendors associated with the artifact.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "description": "A short description.",
            "required": false,
            "type": "string"
          },
          "documentation": {
            "description": "Where to find documentation.",
            "required": false,
            "type": "string"
          },
          "licenses": {
            "description": "The license(s) for the artifact.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "icon": {
            "description": "An icon to associate with the artifact.",
            "required": false,
            "type": "string"
          }
        },
        "required": []
      },
      "PackageDefinition": {
        "$anchor": "#v1/PackageDefinition",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "files": {
            "description": "The list of files and folders to be included with the package.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "registry": {
            "description": "Configuration for publishing the package to a registry.",
            "required": false,
            "$ref": "#/$defs/v1/RegistryDefinition"
          }
        },
        "required": []
      },
      "RegistryDefinition": {
        "$anchor": "#v1/RegistryDefinition",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "host": {
            "description": "The registry to publish to, e.g. registry.candle.dev",
            "type": "string"
          },
          "namespace": {
            "description": "The namespace on the registry. e.g.: [*your username*]",
            "type": "string"
          }
        },
        "required": []
      },
      "ResourceBinding": {
        "$anchor": "#v1/ResourceBinding",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the binding.",
            "type": "string"
          },
          "resource": {
            "description": "The resource to bind to.",
            "$ref": "#/$defs/v1/ResourceDefinition"
          }
        },
        "required": [
          "name",
          "resource"
        ]
      },
      "ImportBinding": {
        "$anchor": "#v1/ImportBinding",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the binding.",
            "type": "string"
          },
          "component": {
            "description": "The import to bind to.",
            "$ref": "#/$defs/v1/ImportDefinition"
          }
        },
        "required": [
          "name",
          "component"
        ]
      },
      "ResourceDefinition": {
        "oneOf": [
          {
            "$ref": "#/$defs/v1/TcpPort"
          },
          {
            "$ref": "#/$defs/v1/UdpPort"
          },
          {
            "$ref": "#/$defs/v1/Url"
          },
          {
            "$ref": "#/$defs/v1/Volume"
          }
        ]
      },
      "TcpPort": {
        "$anchor": "#v1/TcpPort",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/resource/tcpport@v1"
            ]
          },
          "port": {
            "description": "The port to bind to.",
            "$ref": "#/$defs/v1/LiquidTemplate"
          },
          "address": {
            "description": "The address to bind to.",
            "$ref": "#/$defs/v1/LiquidTemplate"
          }
        },
        "required": []
      },
      "UdpPort": {
        "$anchor": "#v1/UdpPort",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/resource/udpport@v1"
            ]
          },
          "port": {
            "description": "The port to bind to.",
            "$ref": "#/$defs/v1/LiquidTemplate"
          },
          "address": {
            "description": "The address to bind to.",
            "$ref": "#/$defs/v1/LiquidTemplate"
          }
        },
        "required": []
      },
      "Volume": {
        "$anchor": "#v1/Volume",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/resource/volume@v1"
            ]
          },
          "path": {
            "description": "The path.",
            "$ref": "#/$defs/v1/LiquidTemplate"
          }
        },
        "required": [
          "path"
        ]
      },
      "Url": {
        "$anchor": "#v1/Url",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/resource/url@v1"
            ]
          },
          "url": {
            "description": "The url string.",
            "$ref": "#/$defs/v1/LiquidTemplate"
          }
        },
        "required": [
          "url"
        ]
      },
      "TriggerDefinition": {
        "oneOf": [
          {
            "$ref": "#/$defs/v1/CliTrigger"
          },
          {
            "$ref": "#/$defs/v1/HttpTrigger"
          },
          {
            "$ref": "#/$defs/v1/TimeTrigger"
          }
        ]
      },
      "CliTrigger": {
        "$anchor": "#v1/CliTrigger",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/trigger/cli@v1"
            ]
          },
          "operation": {
            "description": "The operation that will act as the main entrypoint for this trigger.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/$defs/v1/ComponentOperationExpression"
              }
            ]
          }
        },
        "required": [
          "operation"
        ]
      },
      "TimeTrigger": {
        "$anchor": "#v1/TimeTrigger",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/trigger/time@v1"
            ]
          },
          "schedule": {
            "description": "The schedule to run the trigger with.",
            "$ref": "#/$defs/v1/Schedule"
          },
          "operation": {
            "description": "The operation to execute on the schedule.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/$defs/v1/ComponentOperationExpression"
              }
            ]
          },
          "payload": {
            "description": "Values passed to the operation as inputs",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/OperationInput"
            }
          }
        },
        "required": [
          "schedule",
          "operation",
          "payload"
        ]
      },
      "OperationInput": {
        "$anchor": "#v1/OperationInput",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the input.",
            "type": "string"
          },
          "value": {
            "description": "The value to pass."
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "Schedule": {
        "$anchor": "#v1/Schedule",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "cron": {
            "description": "Schedule in cron format with second precision. See [cron.help](https://cron.help) for more information.",
            "type": "string"
          },
          "repeat": {
            "description": "repeat &#x60;n&#x60; times. Use &#x60;0&#x60; to repeat indefinitely",
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "cron"
        ]
      },
      "ComponentOperationExpression": {
        "$anchor": "#v1/ComponentOperationExpression",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "component": {
            "description": "The component that exports the operation.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/$defs/v1/ComponentDefinition"
              }
            ]
          },
          "name": {
            "description": "The operation name.",
            "type": "string"
          },
          "with": {
            "description": "Configuration to pass to this operation on invocation.",
            "required": false,
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "$ref": "#/$defs/v1/LiquidJsonValue"
              }
            }
          },
          "timeout": {
            "description": "Timeout (in milliseconds) to wait for the operation to complete. Use 0 to wait indefinitely.",
            "required": false,
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "component",
          "name"
        ]
      },
      "HttpTrigger": {
        "$anchor": "#v1/HttpTrigger",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/trigger/http@v1"
            ]
          },
          "resource": {
            "description": "The TcpPort resource to listen on for connections.",
            "type": "string"
          },
          "routers": {
            "description": "The router to handle incoming requests",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/HttpRouter"
            }
          }
        },
        "required": [
          "resource"
        ]
      },
      "HttpRouter": {
        "oneOf": [
          {
            "$ref": "#/$defs/v1/RawRouter"
          },
          {
            "$ref": "#/$defs/v1/RestRouter"
          },
          {
            "$ref": "#/$defs/v1/StaticRouter"
          },
          {
            "$ref": "#/$defs/v1/ProxyRouter"
          }
        ]
      },
      "ProxyRouter": {
        "$anchor": "#v1/ProxyRouter",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/router/proxy@v1"
            ]
          },
          "path": {
            "description": "The path that this router will trigger for.",
            "type": "string"
          },
          "middleware": {
            "description": "Middleware operations for this router.",
            "required": false,
            "$ref": "#/$defs/v1/Middleware"
          },
          "url": {
            "description": "The URL resource to proxy to.",
            "type": "string"
          },
          "strip_path": {
            "description": "Whether or not to strip the router&#x27;s path from the proxied request.",
            "type": "boolean"
          }
        },
        "required": [
          "path",
          "url"
        ]
      },
      "RestRouter": {
        "$anchor": "#v1/RestRouter",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/router/rest@v1"
            ]
          },
          "path": {
            "description": "The path that this router will trigger for.",
            "type": "string"
          },
          "tools": {
            "description": "Additional tools and services to enable.",
            "required": false,
            "$ref": "#/$defs/v1/Tools"
          },
          "middleware": {
            "description": "Middleware operations for this router.",
            "required": false,
            "$ref": "#/$defs/v1/Middleware"
          },
          "routes": {
            "description": "The routes to serve and operations that handle them.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Route"
            }
          },
          "info": {
            "description": "Information about the router to use when generating documentation and other tools.",
            "required": false,
            "$ref": "#/$defs/v1/Info"
          }
        },
        "required": [
          "path"
        ]
      },
      "Route": {
        "$anchor": "#v1/Route",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "sub_path": {
            "description": "The path to serve this route from. See [URI documentation](/docs/configuration/uri) for more information on specifying query and path parameters.",
            "type": "string"
          },
          "operation": {
            "description": "The operation that will act as the main entrypoint for this route.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/$defs/v1/ComponentOperationExpression"
              }
            ]
          },
          "methods": {
            "description": "The HTTP methods to serve this route for.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/HttpMethod"
            }
          },
          "id": {
            "description": "The unique ID of the route, used for documentation and tooling.",
            "required": false,
            "type": "string"
          },
          "description": {
            "description": "A short description of the route.",
            "required": false,
            "type": "string"
          },
          "summary": {
            "description": "A longer description of the route.",
            "required": false,
            "type": "string"
          }
        },
        "required": [
          "sub_path",
          "operation"
        ]
      },
      "Tools": {
        "$anchor": "#v1/Tools",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "openapi": {
            "description": "Set to true to generate an OpenAPI specification and serve it at *router_path*/openapi.json",
            "type": "boolean"
          }
        },
        "required": []
      },
      "Info": {
        "$anchor": "#v1/Info",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "title": {
            "description": "The title of the API.",
            "required": false,
            "type": "string"
          },
          "description": {
            "description": "A short description of the API.",
            "required": false,
            "type": "string"
          },
          "tos": {
            "description": "The terms of service for the API.",
            "required": false,
            "type": "string"
          },
          "contact": {
            "description": "The contact information for the API.",
            "required": false,
            "$ref": "#/$defs/v1/Contact"
          },
          "license": {
            "description": "The license information for the API.",
            "required": false,
            "$ref": "#/$defs/v1/License"
          },
          "version": {
            "description": "The version of the API.",
            "type": "string"
          },
          "documentation": {
            "description": "The URL to the API&#x27;s terms of service.",
            "required": false,
            "$ref": "#/$defs/v1/Documentation"
          }
        },
        "required": []
      },
      "Documentation": {
        "$anchor": "#v1/Documentation",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "url": {
            "description": "The URL to the API&#x27;s documentation.",
            "required": false,
            "type": "string"
          },
          "description": {
            "description": "A short description of the documentation.",
            "required": false,
            "type": "string"
          }
        },
        "required": []
      },
      "License": {
        "$anchor": "#v1/License",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the license.",
            "type": "string"
          },
          "url": {
            "description": "The URL to the license.",
            "required": false,
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "Contact": {
        "$anchor": "#v1/Contact",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the contact.",
            "required": false,
            "type": "string"
          },
          "url": {
            "description": "The URL to the contact.",
            "required": false,
            "type": "string"
          },
          "email": {
            "description": "The email address of the contact.",
            "required": false,
            "type": "string"
          }
        },
        "required": []
      },
      "StaticRouter": {
        "$anchor": "#v1/StaticRouter",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/router/static@v1"
            ]
          },
          "path": {
            "description": "The path that this router will trigger for.",
            "type": "string"
          },
          "middleware": {
            "description": "Middleware operations for this router.",
            "required": false,
            "$ref": "#/$defs/v1/Middleware"
          },
          "volume": {
            "description": "The volume to serve static files from.",
            "type": "string"
          },
          "fallback": {
            "description": "Fallback path (relative to volume &#x60;resource&#x60;) for files to serve in case of a 404. Useful for SPA&#x27;s. if volume resource is: /www and fallback: index.html, then a 404 will serve /www/index.html",
            "required": false,
            "type": "string"
          }
        },
        "required": [
          "path",
          "volume"
        ]
      },
      "RawRouter": {
        "$anchor": "#v1/RawRouter",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/router/raw@v1"
            ]
          },
          "path": {
            "description": "The path that this router will trigger for.",
            "type": "string"
          },
          "middleware": {
            "description": "Middleware operations for this router.",
            "required": false,
            "$ref": "#/$defs/v1/Middleware"
          },
          "codec": {
            "description": "The codec to use when encoding/decoding data.",
            "required": false,
            "$ref": "#/$defs/v1/Codec"
          },
          "operation": {
            "description": "The operation that handles HTTP requests.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/$defs/v1/ComponentOperationExpression"
              }
            ]
          }
        },
        "required": [
          "path",
          "operation"
        ]
      },
      "Middleware": {
        "$anchor": "#v1/Middleware",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "request": {
            "description": "The middleware to apply to requests.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/v1/ComponentOperationExpression"
                }
              ]
            }
          },
          "response": {
            "description": "The middleware to apply to responses.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/v1/ComponentOperationExpression"
                }
              ]
            }
          }
        },
        "required": []
      },
      "TypesConfiguration": {
        "$anchor": "#v1/TypesConfiguration",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/types@v1"
            ]
          },
          "name": {
            "description": "The name of this type.",
            "required": false,
            "type": "string"
          },
          "metadata": {
            "description": "Associated metadata for this type.",
            "required": false,
            "$ref": "#/$defs/v1/Metadata"
          },
          "types": {
            "description": "Additional types to export and make available to the type.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/TypeDefinition"
            }
          },
          "operations": {
            "description": "A list of operation signatures.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/OperationDefinition"
            }
          },
          "package": {
            "description": "Details about the package for this types.",
            "required": false,
            "$ref": "#/$defs/v1/PackageDefinition"
          }
        },
        "required": []
      },
      "TestConfiguration": {
        "$anchor": "#v1/TestConfiguration",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/tests@v1"
            ]
          },
          "name": {
            "description": "The name of this component.",
            "required": false,
            "type": "string"
          },
          "with": {
            "description": "Configuration used to instantiate this component.",
            "required": false,
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "$ref": "#/$defs/v1/LiquidJsonValue"
              }
            }
          },
          "cases": {
            "description": "Unit tests to run against components and operations.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/TestDefinition"
            }
          }
        },
        "required": []
      },
      "ComponentConfiguration": {
        "$anchor": "#v1/ComponentConfiguration",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/component@v1"
            ]
          },
          "name": {
            "description": "The name of the component.",
            "required": false,
            "type": "string"
          },
          "metadata": {
            "description": "Associated metadata for this component.",
            "required": false,
            "$ref": "#/$defs/v1/Metadata"
          },
          "package": {
            "description": "Details about the package for this component.",
            "required": false,
            "$ref": "#/$defs/v1/PackageDefinition"
          },
          "host": {
            "description": "Configuration for when wick hosts this component as a service.",
            "required": false,
            "$ref": "#/$defs/v1/HostConfig"
          },
          "resources": {
            "description": "Resources that the component can access.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/ResourceBinding"
            }
          },
          "import": {
            "description": "Components or types to import into this component&#x27;s scope.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/ImportBinding"
            }
          },
          "types": {
            "description": "Additional types to export and make available to the component.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/TypeDefinition"
            }
          },
          "requires": {
            "description": "Interfaces the component requires to operate.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/InterfaceBinding"
            }
          },
          "component": {
            "description": "Configuration specific to different kinds of components.",
            "$ref": "#/$defs/v1/ComponentKind"
          },
          "tests": {
            "description": "Assertions that can be run against the component to validate its behavior.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/TestConfiguration"
            }
          }
        },
        "required": [
          "component"
        ]
      },
      "InterfaceBinding": {
        "$anchor": "#v1/InterfaceBinding",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the interface.",
            "type": "string"
          },
          "interface": {
            "description": "The interface to bind to.",
            "$ref": "#/$defs/v1/InterfaceDefinition"
          }
        },
        "required": [
          "name",
          "interface"
        ]
      },
      "InterfaceDefinition": {
        "$anchor": "#v1/InterfaceDefinition",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "types": {
            "description": "Types used by the interface&#x27;s operations",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/TypeDefinition"
            }
          },
          "operations": {
            "description": "A list of operations defined by this interface.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/OperationDefinition"
            }
          }
        },
        "required": []
      },
      "CompositeComponentConfiguration": {
        "$anchor": "#v1/CompositeComponentConfiguration",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/component/composite@v1"
            ]
          },
          "operations": {
            "description": "A list of operations exposed by the Composite component.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/CompositeOperationDefinition"
            }
          },
          "with": {
            "description": "Configuration necessary to provide when instantiating the component.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "extends": {
            "description": "A component or components whose operations you want to inherit from.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": []
      },
      "WasmComponentConfiguration": {
        "$anchor": "#v1/WasmComponentConfiguration",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/component/wasmrs@v1"
            ]
          },
          "ref": {
            "description": "The path or OCI reference to the WebAssembly module",
            "type": "string"
          },
          "volumes": {
            "description": "Volumes to expose to the component.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/ExposedVolume"
            }
          },
          "with": {
            "description": "Configuration necessary to provide when instantiating the component.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "operations": {
            "description": "A list of operations implemented by the WebAssembly module.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/OperationDefinition"
            }
          }
        },
        "required": [
          "ref"
        ]
      },
      "ExposedVolume": {
        "$anchor": "#v1/ExposedVolume",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "resource": {
            "description": "The resource ID of the volume.",
            "type": "string"
          },
          "path": {
            "description": "The path to map it to in the component.",
            "type": "string"
          }
        },
        "required": [
          "resource",
          "path"
        ]
      },
      "ComponentKind": {
        "oneOf": [
          {
            "$ref": "#/$defs/v1/WasmComponentConfiguration"
          },
          {
            "$ref": "#/$defs/v1/CompositeComponentConfiguration"
          },
          {
            "$ref": "#/$defs/v1/SqlComponent"
          },
          {
            "$ref": "#/$defs/v1/HttpClientComponent"
          }
        ]
      },
      "ImportDefinition": {
        "oneOf": [
          {
            "$ref": "#/$defs/v1/TypesComponent"
          },
          {
            "$ref": "#/$defs/v1/ManifestComponent"
          },
          {
            "$ref": "#/$defs/v1/SqlComponent"
          },
          {
            "$ref": "#/$defs/v1/HttpClientComponent"
          }
        ]
      },
      "ComponentDefinition": {
        "oneOf": [
          {
            "$ref": "#/$defs/v1/GrpcUrlComponent"
          },
          {
            "$ref": "#/$defs/v1/ManifestComponent"
          },
          {
            "$ref": "#/$defs/v1/ComponentReference"
          },
          {
            "$ref": "#/$defs/v1/SqlComponent"
          },
          {
            "$ref": "#/$defs/v1/HttpClientComponent"
          }
        ]
      },
      "TypesComponent": {
        "$anchor": "#v1/TypesComponent",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/component/types@v1"
            ]
          },
          "ref": {
            "description": "The URL (and optional tag) or local file path to find the types manifest.",
            "type": "string"
          },
          "types": {
            "description": "The types to import from the manifest.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ref"
        ]
      },
      "ComponentReference": {
        "$anchor": "#v1/ComponentReference",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/component/reference@v1"
            ]
          },
          "id": {
            "description": "The id of the referenced component.",
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "HostConfig": {
        "$anchor": "#v1/HostConfig",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "allow_latest": {
            "description": "Whether or not to allow the &#x60;:latest&#x60; tag on remote artifacts.",
            "type": "boolean"
          },
          "insecure_registries": {
            "description": "A list of registries to connect to insecurely (over HTTP vs HTTPS).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rpc": {
            "description": "Configuration for the GRPC server.",
            "required": false,
            "$ref": "#/$defs/v1/HttpConfig"
          }
        },
        "required": []
      },
      "HttpConfig": {
        "$anchor": "#v1/HttpConfig",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "enabled": {
            "description": "Enable/disable the server.",
            "type": "boolean"
          },
          "port": {
            "description": "The port to bind to.",
            "required": false,
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "address": {
            "description": "The address to bind to.",
            "required": false,
            "type": "string"
          },
          "pem": {
            "description": "Path to pem file for TLS.",
            "required": false,
            "type": "string"
          },
          "key": {
            "description": "Path to key file for TLS.",
            "required": false,
            "type": "string"
          },
          "ca": {
            "description": "Path to CA file.",
            "required": false,
            "type": "string"
          }
        },
        "required": []
      },
      "GrpcUrlComponent": {
        "$anchor": "#v1/GrpcUrlComponent",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/component/grpc@v1"
            ]
          },
          "url": {
            "description": "The GRPC URL to connect to.",
            "type": "string"
          },
          "with": {
            "description": "Any configuration necessary for the component.",
            "required": false,
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "$ref": "#/$defs/v1/LiquidJsonValue"
              }
            }
          }
        },
        "required": [
          "url"
        ]
      },
      "ManifestComponent": {
        "$anchor": "#v1/ManifestComponent",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/component/manifest@v1"
            ]
          },
          "ref": {
            "description": "The URL (and optional tag) or local file path to find the manifest.",
            "type": "string"
          },
          "with": {
            "description": "Any configuration necessary for the component.",
            "required": false,
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "$ref": "#/$defs/v1/LiquidJsonValue"
              }
            }
          },
          "provide": {
            "description": "External components to provide to the referenced component.",
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "ref"
        ]
      },
      "CompositeOperationDefinition": {
        "$anchor": "#v1/CompositeOperationDefinition",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the operation.",
            "type": "string"
          },
          "with": {
            "description": "Any configuration required by the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "inputs": {
            "description": "Types of the inputs to the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "outputs": {
            "description": "Types of the outputs to the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "uses": {
            "description": "A map of IDs to specific operations.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/OperationInstance"
            }
          },
          "flow": {
            "description": "A list of connections from operation to operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/FlowExpression"
            }
          },
          "operations": {
            "description": "Additional &#x60;CompositeOperationDefinition&#x60;s to define as children.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/CompositeOperationDefinition"
            }
          }
        },
        "required": []
      },
      "FlowExpression": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "$ref": "#/$defs/v1/ConnectionDefinition"
          },
          {
            "$ref": "#/$defs/v1/BlockExpression"
          }
        ]
      },
      "BlockExpression": {
        "$anchor": "#v1/BlockExpression",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "expressions": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/FlowExpression"
            }
          }
        },
        "required": [
          "expressions"
        ]
      },
      "ConnectionDefinition": {
        "$anchor": "#v1/ConnectionDefinition",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "from": {
            "description": "An upstream operation&#x27;s output.",
            "$ref": "#/$defs/v1/ConnectionTargetDefinition"
          },
          "to": {
            "description": "A downstream operation&#x27;s input.",
            "$ref": "#/$defs/v1/ConnectionTargetDefinition"
          }
        },
        "required": [
          "from",
          "to"
        ]
      },
      "ConnectionTargetDefinition": {
        "$anchor": "#v1/ConnectionTargetDefinition",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "instance": {
            "description": "The instance ID of the component operation.",
            "type": "string"
          },
          "port": {
            "description": "The operation&#x27;s input or output (depending on to/from).",
            "required": false,
            "type": "string"
          },
          "data": {
            "description": "The default value to provide on this connection in the event of an error.",
            "required": false,
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "$ref": "#/$defs/v1/LiquidJsonValue"
              }
            }
          }
        },
        "required": [
          "instance"
        ]
      },
      "OperationDefinition": {
        "$anchor": "#v1/OperationDefinition",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the operation.",
            "type": "string"
          },
          "with": {
            "description": "Any configuration required by the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "inputs": {
            "description": "Types of the inputs to the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "outputs": {
            "description": "Types of the outputs to the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          }
        },
        "required": []
      },
      "Field": {
        "$anchor": "#v1/Field",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the field.",
            "type": "string"
          },
          "type": {
            "description": "The type signature of the field.",
            "$ref": "#/$defs/v1/TypeSignature"
          },
          "description": {
            "description": "The description of the field.",
            "required": false,
            "type": "string"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "TypeSignature": {
        "oneOf": [
          {
            "type": "string"
          }
        ]
      },
      "I8": {
        "$anchor": "#v1/I8",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "i8"
        ]
      },
      "I16": {
        "$anchor": "#v1/I16",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "i16"
        ]
      },
      "I32": {
        "$anchor": "#v1/I32",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "i32"
        ]
      },
      "I64": {
        "$anchor": "#v1/I64",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "i64"
        ]
      },
      "U8": {
        "$anchor": "#v1/U8",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "u8"
        ]
      },
      "U16": {
        "$anchor": "#v1/U16",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "u16"
        ]
      },
      "U32": {
        "$anchor": "#v1/U32",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "u32"
        ]
      },
      "U64": {
        "$anchor": "#v1/U64",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "u64"
        ]
      },
      "F32": {
        "$anchor": "#v1/F32",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "f32"
        ]
      },
      "F64": {
        "$anchor": "#v1/F64",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "f64"
        ]
      },
      "Bool": {
        "$anchor": "#v1/Bool",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "i8"
        ]
      },
      "StringType": {
        "$anchor": "#v1/StringType",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "string"
        ]
      },
      "Datetime": {
        "$anchor": "#v1/Datetime",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "datetime"
        ]
      },
      "Bytes": {
        "$anchor": "#v1/Bytes",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "bytes"
        ]
      },
      "Custom": {
        "$anchor": "#v1/Custom",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the custom type.",
            "type": "string"
          }
        },
        "required": []
      },
      "Optional": {
        "$anchor": "#v1/Optional",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/$defs/v1/TypeSignature"
          }
        },
        "required": [
          "type"
        ]
      },
      "List": {
        "$anchor": "#v1/List",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/$defs/v1/TypeSignature"
          }
        },
        "required": [
          "type"
        ]
      },
      "Map": {
        "$anchor": "#v1/Map",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/$defs/v1/TypeSignature"
          },
          "value": {
            "$ref": "#/$defs/v1/TypeSignature"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "Object": {
        "$anchor": "#v1/Object",
        "additionalProperties": false,
        "type": "string",
        "enum": [
          "object"
        ]
      },
      "TypeDefinition": {
        "oneOf": [
          {
            "$ref": "#/$defs/v1/StructSignature"
          },
          {
            "$ref": "#/$defs/v1/EnumSignature"
          },
          {
            "$ref": "#/$defs/v1/UnionSignature"
          }
        ]
      },
      "StructSignature": {
        "$anchor": "#v1/StructSignature",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/type/struct@v1"
            ]
          },
          "name": {
            "description": "The name of the struct.",
            "type": "string"
          },
          "fields": {
            "description": "The fields in this struct.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "description": {
            "description": "The description of the struct.",
            "required": false,
            "type": "string"
          }
        },
        "required": []
      },
      "UnionSignature": {
        "$anchor": "#v1/UnionSignature",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/type/union@v1"
            ]
          },
          "name": {
            "description": "The name of the union.",
            "type": "string"
          },
          "types": {
            "description": "The types in the union.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/TypeSignature"
            }
          },
          "description": {
            "description": "The description of the union.",
            "required": false,
            "type": "string"
          }
        },
        "required": []
      },
      "EnumSignature": {
        "$anchor": "#v1/EnumSignature",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/type/enum@v1"
            ]
          },
          "name": {
            "description": "The name of the enum.",
            "type": "string"
          },
          "variants": {
            "description": "The variants in the enum.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/EnumVariant"
            }
          },
          "description": {
            "description": "The description of the enum.",
            "required": false,
            "type": "string"
          }
        },
        "required": []
      },
      "EnumVariant": {
        "$anchor": "#v1/EnumVariant",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the variant.",
            "type": "string"
          },
          "index": {
            "description": "The index of the variant.",
            "required": false,
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "value": {
            "description": "The optional value of the variant.",
            "required": false,
            "type": "string"
          },
          "description": {
            "description": "A description of the variant.",
            "required": false,
            "type": "string"
          }
        },
        "required": []
      },
      "OperationInstance": {
        "$anchor": "#v1/OperationInstance",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the binding.",
            "type": "string"
          },
          "operation": {
            "description": "The operation to bind to.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/$defs/v1/ComponentOperationExpression"
              }
            ]
          },
          "with": {
            "description": "Data to associate with the reference, if any.",
            "required": false,
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "$ref": "#/$defs/v1/LiquidJsonValue"
              }
            }
          },
          "timeout": {
            "description": "Timeout (in milliseconds) to wait for the operation to complete. Use 0 to wait indefinitely.",
            "required": false,
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "name",
          "operation"
        ]
      },
      "TestDefinition": {
        "$anchor": "#v1/TestDefinition",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the test.",
            "required": false,
            "type": "string"
          },
          "operation": {
            "description": "The operaton to test.",
            "type": "string"
          },
          "inherent": {
            "description": "Inherent data to use for the test.",
            "required": false,
            "$ref": "#/$defs/v1/InherentData"
          },
          "with": {
            "description": "The configuration for the operation, if any.",
            "required": false,
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "$ref": "#/$defs/v1/LiquidJsonValue"
              }
            }
          },
          "inputs": {
            "description": "The inputs to the test.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/PacketData"
            }
          },
          "outputs": {
            "description": "The expected outputs of the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/PacketData"
            }
          }
        },
        "required": [
          "operation"
        ]
      },
      "InherentData": {
        "$anchor": "#v1/InherentData",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "seed": {
            "description": "A random seed, i.e. to initialize a random number generator.",
            "required": false,
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "timestamp": {
            "description": "A timestamp.",
            "required": false,
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "required": []
      },
      "PacketData": {
        "oneOf": [
          {
            "$ref": "#/$defs/v1/SuccessPacket"
          },
          {
            "$ref": "#/$defs/v1/ErrorPacket"
          }
        ]
      },
      "SuccessPacket": {
        "$anchor": "#v1/SuccessPacket",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the input or output this packet is going to or coming from.",
            "type": "string"
          },
          "flags": {
            "description": "Any flags set on the packet. Deprecated, use &#x27;flag:&#x27; instead",
            "required": false,
            "$ref": "#/$defs/v1/PacketFlags"
          },
          "flag": {
            "description": "The flag set on the packet.",
            "required": false,
            "$ref": "#/$defs/v1/PacketFlag"
          },
          "value": {
            "description": "The data to send.",
            "required": false,
            "$ref": "#/$defs/v1/LiquidJsonValue"
          }
        },
        "required": [
          "name"
        ]
      },
      "ErrorPacket": {
        "$anchor": "#v1/ErrorPacket",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the input or output this packet is going to or coming from.",
            "type": "string"
          },
          "flags": {
            "description": "Any flags set on the packet. Deprecated, use &#x27;flag:&#x27; instead",
            "required": false,
            "$ref": "#/$defs/v1/PacketFlags"
          },
          "flag": {
            "description": "The flag set on the packet.",
            "required": false,
            "$ref": "#/$defs/v1/PacketFlag"
          },
          "error": {
            "description": "The error message.",
            "$ref": "#/$defs/v1/LiquidTemplate"
          }
        },
        "required": [
          "name",
          "error"
        ]
      },
      "PacketFlags": {
        "$anchor": "#v1/PacketFlags",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "done": {
            "description": "Indicates the port should be considered closed.",
            "type": "boolean"
          },
          "open": {
            "description": "Indicates the opening of a new substream context within the parent stream.",
            "type": "boolean"
          },
          "close": {
            "description": "Indicates the closing of a substream context within the parent stream.",
            "type": "boolean"
          }
        },
        "required": []
      },
      "PacketFlag": {
        "$anchor": "#v1/PacketFlag",
        "enum": [
          "Done",
          "Open",
          "Close"
        ]
      },
      "SqlComponent": {
        "$anchor": "#v1/SqlComponent",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/component/sql@v1"
            ]
          },
          "resource": {
            "description": "The connect string URL resource for the database.",
            "type": "string"
          },
          "tls": {
            "description": "Whether or not to use TLS.",
            "type": "boolean"
          },
          "with": {
            "description": "Configuration necessary to provide when instantiating the component.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "operations": {
            "description": "A list of operations to expose on this component.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/SqlQueryKind"
            }
          }
        },
        "required": []
      },
      "SqlQueryKind": {
        "oneOf": [
          {
            "$ref": "#/$defs/v1/SqlOperationDefinition"
          },
          {
            "$ref": "#/$defs/v1/SqlExecOperationDefinition"
          }
        ]
      },
      "SqlOperationDefinition": {
        "$anchor": "#v1/SqlOperationDefinition",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the operation.",
            "type": "string"
          },
          "with": {
            "description": "Any configuration required by the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "inputs": {
            "description": "Types of the inputs to the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "outputs": {
            "description": "Types of the outputs to the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "query": {
            "description": "The query to execute.",
            "type": "string"
          },
          "arguments": {
            "description": "The positional arguments to the query, defined as a list of input names.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "on_error": {
            "description": "What to do when an error occurs.",
            "required": false,
            "$ref": "#/$defs/v1/ErrorBehavior"
          }
        },
        "required": [
          "query"
        ]
      },
      "SqlExecOperationDefinition": {
        "$anchor": "#v1/SqlExecOperationDefinition",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the operation.",
            "type": "string"
          },
          "with": {
            "description": "Any configuration required by the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "inputs": {
            "description": "Types of the inputs to the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "outputs": {
            "description": "Types of the outputs to the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "exec": {
            "description": "The query to execute.",
            "type": "string"
          },
          "arguments": {
            "description": "The positional arguments to the query, defined as a list of input names.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "on_error": {
            "description": "What to do when an error occurs.",
            "required": false,
            "$ref": "#/$defs/v1/ErrorBehavior"
          }
        },
        "required": [
          "exec"
        ]
      },
      "ErrorBehavior": {
        "$anchor": "#v1/ErrorBehavior",
        "enum": [
          "Ignore",
          "Commit",
          "Rollback"
        ]
      },
      "HttpClientComponent": {
        "$anchor": "#v1/HttpClientComponent",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "The kind of the collection",
            "enum": [
              "wick/component/http@v1"
            ]
          },
          "resource": {
            "description": "The URL base to use.",
            "type": "string"
          },
          "codec": {
            "description": "The codec to use when encoding/decoding data. Can be overridden by individual operations.",
            "required": false,
            "$ref": "#/$defs/v1/Codec"
          },
          "with": {
            "description": "Configuration necessary to provide when instantiating the component.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "operations": {
            "description": "A list of operations to expose on this component.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/HttpClientOperationDefinition"
            }
          }
        },
        "required": []
      },
      "HttpClientOperationDefinition": {
        "$anchor": "#v1/HttpClientOperationDefinition",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the operation.",
            "type": "string"
          },
          "with": {
            "description": "Any configuration required by the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "inputs": {
            "description": "Types of the inputs to the operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/v1/Field"
            }
          },
          "method": {
            "description": "The HTTP method to use.",
            "$ref": "#/$defs/v1/HttpMethod"
          },
          "codec": {
            "description": "The codec to use when encoding/decoding data.",
            "required": false,
            "$ref": "#/$defs/v1/Codec"
          },
          "headers": {
            "description": "Any headers to add to the request.",
            "required": false,
            "type": "object",
            "patternProperties": {
              "[a-zA-Z0-9][a-zA-Z0-9_]*": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "body": {
            "description": "The body to send, processed as a structured JSON liquid template.",
            "required": false,
            "$ref": "#/$defs/v1/LiquidJsonValue"
          },
          "path": {
            "description": "The path to append to our base URL, processed as a liquid template with each input as part of the template data.",
            "type": "string"
          }
        },
        "required": []
      },
      "Codec": {
        "$anchor": "#v1/Codec",
        "enum": [
          "Json",
          "Raw",
          "FormData",
          "Xml"
        ]
      },
      "HttpMethod": {
        "$anchor": "#v1/HttpMethod",
        "enum": [
          "Get",
          "Post",
          "Put",
          "Delete"
        ]
      }
    }
  },
  "oneOf": [
    {
      "$ref": "#/$defs/v1/AppConfiguration"
    },
    {
      "$ref": "#/$defs/v1/ComponentConfiguration"
    },
    {
      "$ref": "#/$defs/v1/TypesConfiguration"
    },
    {
      "$ref": "#/$defs/v1/TestConfiguration"
    },
    {
      "$ref": "#/$defs/v0/HostManifest"
    }
  ]
}
