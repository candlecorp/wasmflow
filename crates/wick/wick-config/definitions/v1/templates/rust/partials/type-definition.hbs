
{{#each fields}}
  {{#if default}}
#[allow(non_snake_case)]
pub(crate) fn {{upperCase (snakeCase ../name.value)}}_{{upperCase name.value}}() -> {{> expand-type type }} {
  {{> expand-value default}}
}
  {{/if}}
{{/each}}


{{#withAnnotation "default"}}
#[derive(Debug, Default, Clone, Serialize, Deserialize, PartialEq)]
{{else}}
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
{{/withAnnotation}}
{{#withAnnotation "custom_serializer"}}
#[serde(serialize_with = "crate::v1::helpers::serialize_{{snakeCase ../name.value}}")]
{{/withAnnotation}}
{{#withAnnotation "into_string"}}
#[serde(into = "String")]
{{/withAnnotation}}
#[serde(deny_unknown_fields)]
{{#if description}}
/// {{{description.value}}}
{{/if}}
{{#withAnnotation "nameonly"}}
pub(crate) struct {{../name.value}};
{{else}}
pub(crate) struct {{name.value}} {
  {{#each fields}}
    {{#if description}}
    /// {{description.value}}
    {{/if}}
    {{#withAnnotation "flatten"}}
    #[serde(flatten)]
    {{/withAnnotation}}

    {{#withAnnotation "deprecated"}}
    #[deprecated()]
    {{/withAnnotation}}
    {{#unlessAnnotation "required"}}
      {{#if default}}
      #[serde(default = "{{upperCase (snakeCase ../name.value)}}_{{upperCase name.value}}")]
      {{else}}
      #[serde(default)]
      {{/if}}
    {{/unlessAnnotation}}
    {{#withAnnotation "custom_serializer"}}
    #[serde(serialize_with = "{{arguments.0.value.value}}")]
    {{/withAnnotation}}
    {{#withAnnotation "alias"}}
    #[serde(alias = "{{arguments.0.value.value}}")]
    {{/withAnnotation}}
    {{#switch type.kind}}
      {{#case "MapType"}}
        #[serde(skip_serializing_if = "HashMap::is_empty")]
        {{#switch type.valueType.name.value}}
          {{#case "InstanceDefinition"}}
            #[serde(deserialize_with = "crate::v1::parse::map_component_def")]
          {{/case}}
          {{#case "ComponentDefinition"}}
            #[serde(deserialize_with = "crate::v1::parse::component_shortform")]
          {{/case}}
          {{#case "string"}}
            #[serde(deserialize_with = "crate::helpers::kv_deserializer")]
          {{/case}}
        {{/switch}}
      {{/case}}
      {{#case "ListType"}}
      #[serde(skip_serializing_if = "Vec::is_empty")]
        {{#ifCond type.type.name.value "==" "FlowExpression"}}
          #[serde(deserialize_with = "crate::v1::parse::vec_connection")]
        {{/ifCond}}
        {{#ifCond type.type.name.value "==" "ComponentOperationExpression"}}
          #[serde(deserialize_with = "crate::v1::parse::vec_component_operation")]
        {{/ifCond}}
      {{/case}}
      {{#case "Optional"}}
        #[serde(skip_serializing_if = "Option::is_none")]
        {{#ifCond type.type.name.value "==" "ConnectionTargetDefinition"}}
          #[serde(deserialize_with = "crate::v1::parse::connection_target_shortform")]
        {{/ifCond}}
        {{#ifCond type.type.kind "==" "MapType"}}
          {{#switch type.type.valueType.name.value}}
            {{#case "any"}}
              #[serde(deserialize_with = "crate::helpers::configmap_deserializer")]
            {{/case}}
          {{/switch}}
        {{/ifCond}}
      {{/case}}
      {{#case "Named"}}
        {{#switch type.name.value}}
          {{#case "ComponentOperationExpression"}}#[serde(deserialize_with = "crate::v1::parse::component_operation_syntax")]{{/case}}
          {{#case "ConnectionTargetDefinition"}}#[serde(deserialize_with = "crate::v1::parse::connection_target_shortform")]{{/case}}
          {{#case "ComponentDefinition"}}#[serde(deserialize_with = "crate::v1::parse::component_shortform")]{{/case}}
        {{/switch}}
      {{/case}}
    {{/switch}}
    {{#withAnnotation "rename"}}
    {{#ifCond name.value '===' 'rename'}}
    #[serde(rename="{{../name.value}}")]
    pub(crate) {{arguments.0.value.value}}:
    {{/ifCond}}
    {{else}}
    pub(crate) {{name.value}}:
    {{/withAnnotation}}

    {{#ifCond ../name.value '==' 'MapType'}}
    Box<{{> expand-type type}}>,
    {{else}}
      {{#withAnnotation "recursive"}}
        Box<{{> expand-type ../type}}>,
      {{else}}
        {{> expand-type type}},
      {{/withAnnotation}}
    {{/ifCond}}
  {{/each}}
}
{{/withAnnotation}}