
// A list of ports and their type signatures.
#[must_use]
#[cfg(feature="host")]
pub fn outputs_list() -> std::collections::HashMap<String, wasmflow_sdk::v1::types::TypeSignature> {
  let mut map = std::collections::HashMap::new();
  {{#each .}}
    map.insert("{{@key}}".to_owned(),{{> type-signature .}});
  {{/each}}
  map
}

// A list of output ports and their associated stream sender implementations.
#[derive(Debug)]
#[cfg(feature = "host")]
pub struct OutputPorts {
  {{#each .}}
    pub {{snakeCase @key}}: {{pascalCase @key}}PortSender,
  {{/each}}
}

impl OutputPorts {
  fn new(id: u32) -> Self {
    Self {
    {{#each .}}
       {{snakeCase @key}}: {{pascalCase @key}}PortSender::new(id),
    {{/each}}
    }
  }
}

// Definition and implementation of each port's sender.
{{#each .}}
#[derive(Debug)]
#[cfg(feature = "host")]
pub struct {{pascalCase @key}}PortSender {
    port: wasmflow_sdk::v1::PortChannel,
    id: u32,
}

#[cfg(feature = "host")]
impl {{pascalCase @key}}PortSender {
    fn new(id:u32) -> Self {
        Self {
            id,
            port: wasmflow_sdk::v1::PortChannel::new("{{@key}}"),
        }
    }
}

#[cfg(all(feature = "host"))]
impl wasmflow_sdk::v1::Writable for {{pascalCase @key}}PortSender {
    type PayloadType = {{> expand-type .}};

    fn get_port(&self) -> Result<&wasmflow_sdk::v1::PortChannel, wasmflow_sdk::v1::BoxedError> {
      if self.port.is_closed() {
        Err(Box::new(wasmflow_sdk::v1::error::Error::SendError("@key".to_owned())))
      } else {
        Ok(&self.port)
      }
    }

    fn get_port_name(&self) -> &str {
      &self.port.name
    }

    fn get_id(&self) -> u32 {
      self.id
    }
}

{{/each}}

#[cfg(all(feature = "host"))]
pub fn get_outputs(id:u32) -> (OutputPorts, wasmflow_sdk::v1::PacketStream) {
    let mut outputs = OutputPorts::new(id);
    let mut ports = vec![
    {{#each .}}
    &mut outputs.{{snakeCase @key}}.port,
    {{/each}}
    ];
    let stream = wasmflow_sdk::v1::PortChannel::merge_all(&mut ports);
    (outputs, stream)
}

#[allow(missing_debug_implementations)]
pub struct Outputs {
  packets: ComponentOutput
}

impl Outputs {
  {{#each .}}
    pub async fn {{snakeCase @key}}(&mut self)-> Result<wasmflow_sdk::v1::PortOutput<{{> expand-type . }}>, wasmflow_sdk::v1::error::Error> {
      let packets = self.packets.drain_port("{{@key}}").await?;
      Ok(wasmflow_sdk::v1::PortOutput::new("{{@key}}".to_owned(), packets))
    }
  {{/each}}
}

impl From<ComponentOutput> for Outputs {
  fn from(packets: ComponentOutput) -> Self {
    Self{packets}
  }
}

impl From<wasmflow_sdk::v1::PacketStream> for Outputs {
  fn from(stream: wasmflow_sdk::v1::PacketStream) -> Self {
    Self {
        packets: ComponentOutput::new(stream),
    }
  }
}

#[cfg(not(target_arch = "wasm32"))]
impl From<wasmflow_sdk::v1::transport::TransportStream> for Outputs {
  fn from(stream: wasmflow_sdk::v1::transport::TransportStream) -> Self {
    Self {
        packets: ComponentOutput::new_from_ts(stream),
    }
  }
}
