

{{#eachNamespace components=components namespace=namespace}}
  {{#if namespace}}
  // start namespace {{namespace}}
  pub mod {{moduleName namespace}} {
    {{> modules components=components  namespace=namespace implementation=../implementation}}
  }
  // end namespace {{namespace}}
  {{else}}
    {{#each components}}
    // start component {{name}}
    pub mod {{moduleLeafName name}} {
      {{#if ../../implementation}}
        // The user-facing implementation for State and job impl.
        use crate::components::{{moduleName name}} as implementation;
      {{/if}}

      // The generated definition of inputs, outputs, config, et al.
      {{#if ../../isWellKnown}}
      use {{moduleName ../../schema.name}}::{{moduleName name}} as definition;
      {{else}}
      use super::{{moduleLeafName name}} as definition;
      {{/if}}
      // The generated integration code between the definition and the implementation.
      use super::{{moduleLeafName name}} as integration;

      {{> imports }}

      pub use wasmflow_sdk::v1::packet::v1::Packet;
      pub use wasmflow_sdk::v1::console_log;


      {{#if ../../implementation}}
        {{> component-struct }}
        {{> job-wrapper . }}
      {{/if}}

      {{#unless ../../isWellKnown }}
      {{> component-signature-fn name}}
      {{> inputs inputs }}
      {{> outputs outputs }}
      {{/unless}}
      {{> config (get @root.interface.config name) }}
    }
    // end component {{name}}
  {{/each}}
  {{/if}}

{{/eachNamespace}}

{{#if implementation}}
{{#unless namespace}}
{{#unless isWellKnown}}
pub mod __batch__ {
  use crate::components::__batch__ as implementation;
  use super::__batch__ as integration;

  {{#if ../isWellKnown}}
  use {{moduleName ../schema.name}}::__batch__ as definition;
  {{else}}
  use super::__batch__ as definition;
  {{/if}}

  {{> imports }}

  pub use wasmflow_sdk::v1::packet::v1::Packet;
  pub use wasmflow_sdk::v1::console_log;

  {{> job-wrapper . batch=true}}

  #[derive(Debug, serde::Deserialize, serde::Serialize, Clone)]
  pub enum ComponentInputs {
    {{#each interface.components}}
      {{pascalCase name}}(super::{{moduleName name}}::Inputs),
    {{/each}}
    {{#each interface.wellknown}}
      {{#each schema.components}}
        {{pascalCase name}}({{moduleName ../schema.name}}::{{moduleName name}}::Inputs),
      {{/each}}
    {{/each}}
  }

  #[cfg(all(feature = "guest"))]
  #[allow(missing_debug_implementations)]
  pub enum ComponentOutputs {
    {{#each interface.components}}
      {{pascalCase name}}(super::{{moduleName name}}::Outputs),
    {{/each}}
    {{#each interface.wellknown}}
      {{#each schema.components}}
        {{pascalCase name}}({{moduleName ../schema.name}}::{{moduleName name}}::Outputs),
      {{/each}}
    {{/each}}
  }

  #[derive(Debug, serde::Deserialize)]
  pub enum Config {
    {{#each interface.components}}
      {{pascalCase name}}(super::{{moduleName name}}::Config),
    {{/each}}
    {{#each interface.wellknown}}
      {{#each schema.components}}
        {{pascalCase name}}({{moduleName ../schema.name}}::{{moduleName name}}::Config),
      {{/each}}
    {{/each}}
  }

  {{> component-struct }}
  {{> outputs batch.outputs }}
  {{> inputs batch.inputs }}

}

{{/unless}}
{{/unless}}
{{/if}}

