

{{#if @root.stateful}}
impl wasmflow_sdk::v1::stateful::BatchedJobExecutor for Component {
{{else}}
impl wasmflow_sdk::v1::ephemeral::BatchedJobExecutor for Component {
{{/if}}
  #[cfg(not(target_arch = "wasm32"))]
  type Payload = wasmflow_sdk::v1::packet::v1::PacketMap;
  #[cfg(target_arch = "wasm32")]
  type Payload = wasmflow_sdk::v1::wasm::EncodedMap;
  type Config = Config;
  type Return = (wasmflow_sdk::v1::PacketStream, u32);
  {{#if @root.stateful}}type Context = crate::Context;{{/if}}

  fn execute(
    &self,
    payload: wasmflow_sdk::v1::IncomingPayload<Self::Payload, Self::Config>,
    {{#if @root.stateful}}context: Self::Context,{{/if}}
  ) -> wasmflow_sdk::v1::BoxedFuture<Result<Self::Return, wasmflow_sdk::v1::BoxedError>> {
    Box::pin(async move {
      use wasmflow_sdk::v1::{{#if @root.stateful}}stateful{{else}}ephemeral{{/if}}::BatchedComponent;
      let id = payload.id();
      let (outputs, stream) = definition::get_outputs(id);
      let (payload, config) = payload.into_parts();
      let inputs = definition::convert_inputs(payload)?;

      Component::job(inputs, outputs, {{#if @root.stateful}}context,{{/if}} config).await?;
      Ok((stream,id))
    })
  }
}
