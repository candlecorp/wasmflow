name: nightly-build
on:
  schedule:
    - cron: "0 1 * * *" # 1am UTC
  push:
    branches:
      - release-automation
permissions:
  contents: write
  packages: write
env:
  SCCACHE_AZURE_BLOB_CONTAINER: ${{ secrets.SCCACHE_AZURE_BLOB_CONTAINER }}
  SCCACHE_AZURE_CONNECTION_STRING: ${{ secrets.SCCACHE_AZURE_CONNECTION_STRING }}
  SCCACHE_AZURE_PREFIX: "wick"
jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Update Nightly Tag
        uses: richardsimko/update-tag@v1
        with:
          tag_name: nightly
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build:
    runs-on: ${{ matrix.config.os }}
    needs: tag
    strategy:
      matrix:
        config:
          - {
              os: "ubuntu-latest",
              name: "linux",
              arch: "amd64",
              target: "x86_64-unknown-linux-gnu",
            }
          - {
              os: "ubuntu-latest",
              name: "linux",
              target: "aarch64-unknown-linux-gnu",
              arch: "aarch64",
            }
          - {
              os: "macos-latest",
              name: "macos",
              target: "x86_64-apple-darwin",
              arch: "amd64",
            }
          - {
              os: "macos-latest",
              name: "macos",
              target: "aarch64-apple-darwin",
              arch: "aarch64",
            }
          - {
              os: "ubuntu-latest",
              name: "win",
              target: "x86_64-pc-windows-gnu",
              arch: "amd64",
            }
    steps:
      - uses: actions/checkout@v1
      - name: install protobuf
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: setup for cross-compiled linux aarch64 build
        if: matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt update
          sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu pkg-config
          echo '[target.aarch64-unknown-linux-gnu]' >> ${HOME}/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ${HOME}/.cargo/config.toml
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
      - name: setup for cross-compiled windows build
        if: matrix.config.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt update
          sudo apt install mingw-w64
          echo '[target.x86_64-pc-windows-gnu]' >> ${HOME}/.cargo/config.toml
          echo 'linker = "x86_64-w64-mingw32-gcc"' >> ${HOME}/.cargo/config.toml
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/x86_64-w64-mingw32" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-w64-mingw32/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
      - name: cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.config.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.68.0
          default: true
          target: ${{ matrix.config.target }}
          components: rustfmt, clippy, rustc, cargo, rust-docs, rust-std
      - name: "rustup updates"
        run: |
          rustup target add wasm32-unknown-unknown wasm32-wasi
          cargo install tomlq cargo-deny just sccache
          export RUSTC_WRAPPER="sccache"
      #Updating rustup updates means that the github cache needs to be manually deleted.
      - name: "build binary"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release -p wick --target=${{ matrix.config.target }} --features openssl/vendored
      - name: package release assets
        if: matrix.config.target != 'x86_64-pc-windows-gnu'
        run: |
          mkdir -p _dist
          cp README.md LICENSE target/${{ matrix.config.target }}/release/wick _dist/
          cd _dist
          tar czf wick-nightly-${{ matrix.config.name }}-${{ matrix.config.arch }}.tar.gz README.md LICENSE wick
      - name: package release assets
        if: matrix.config.target == 'x86_64-pc-windows-gnu'
        shell: bash
        run: |
          mkdir -p _dist
          cp README.md LICENSE target/${{ matrix.config.target }}/release/wick.exe _dist/
          cd _dist
          7z a -tzip wick-nightly-${{ matrix.config.name }}-${{ matrix.config.arch }}.zip README.md LICENSE wick.exe
      - name: upload release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: _dist/wick-nightly-${{ matrix.config.name }}-${{ matrix.config.arch }}.*
          tag: nightly
          overwrite: true
          file_glob: true
  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v1
      - name: ghcr login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile.nightly
          push: true
          tags: ghcr.io/candlecorp/wick:nightly
          platforms: linux/amd64,linux/arm64
