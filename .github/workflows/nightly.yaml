name: nightly-build
on:
  schedule:
    - cron: "0 1 * * *" # 1am UTC
  push:
    branches:
      - release-automation
jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
              os: "ubuntu-latest",
              name: "linux",
              arch: "amd64",
              target: "x86_64-unknown-linux-gnu",
            }
          - {
              os: "ubuntu-latest",
              name: "linux",
              target: "aarch64-unknown-linux-gnu",
              arch: "aarch64",
            }
          - {
              os: "macos-latest",
              name: "macos",
              target: "x86_64-apple-darwin",
              arch: "amd64",
            }
          - {
              os: "macos-latest",
              name: "macos",
              target: "aarch64-apple-darwin",
              arch: "aarch64",
            }
          - {
              os: "windows-latest",
              name: "win",
              target: "x86_64-pc-windows-gnu",
              arch: "amd64",
            }
    steps:
      - uses: actions/checkout@v1
      - name: install protobuf
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: setup nasm for windows
        if: runner.os == 'Windows'
        uses: ilammy/setup-nasm@v1
      - name: setup windows sdk
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      - name: setup windows sdk
        if: runner.os == 'Windows'
        uses: lukka/get-cmake@latest
      - name: Install Visual Studio Build Tools
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1
      - name: setup for cross-compiled linux aarch64 build
        if: matrix.config.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt update
          sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo '[target.aarch64-unknown-linux-gnu]' >> ${HOME}/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ${HOME}/.cargo/config.toml
      - name: cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.config.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.67.1
          default: true
          target: ${{ matrix.config.target }}
          components: rustfmt, clippy, rustc, cargo, rust-docs, rust-std
      - name: "rustup updates"
        run: |
          rustup target add wasm32-unknown-unknown wasm32-wasi
          cargo install tomlq cargo-deny just
      - name: "build binary"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release -p wick --target=${{ matrix.config.target }}
      - name: package release assets
        if: runner.os != 'Windows'
        run: |
          mkdir _dist
          cp README.md LICENSE target/${{ matrix.config.target }}/release/wick _dist/
          cd _dist
          tar czf wick-nightly-${{ matrix.config.name }}-${{ matrix.config.arch }}.tar.gz README.md LICENSE wick
      - name: package release assets
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir _dist
          cp README.md LICENSE target/${{ matrix.config.target }}/release/wick.exe _dist/
          cd _dist
          7z a -tzip wick-nightly-${{ matrix.config.name }}-${{ matrix.config.arch }}.zip README.md LICENSE wick.exe
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: release
        uses: pyTooling/Actions/releaser@r0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          rm: true
          tag: nightly
          files: |
            _dist/wick-nightly-win-amd64.zip
            _dist/wick-nightly-linux-amd64.tar.gz
            _dist/wick-nightly-linux-aarch64.tar.gz
            _dist/wick-nightly-macos-amd64.tar.gz
            _dist/wick-nightly-macos-aarch64.tar.gz
