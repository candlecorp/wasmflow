version: 2.1
orbs:
  slack: circleci/slack@4.10.1

data:
  credentials:
    docker: &AUTH
      username: $DOCKERHUB_USER
      password: $DOCKERHUB_PASSWORD
  architectures: &ARCHITECTURES
    - x86_64-unknown-linux-gnu
    - aarch64-unknown-linux-gnu
    - x86_64-apple-darwin
    - aarch64-apple-darwin
    - x86_64-pc-windows-gnu

executors:
  build-executor:
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
    resource_class: large
    environment:
      SCCACHE_AZURE_BLOB_CONTAINER: circleci-sccache
      SCCACHE_ERROR_LOG: /tmp/sccache.log
      CARGO_PROFILE_RELEASE_DEBUG: '0' # https://doc.rust-lang.org/cargo/reference/profiles.html#debug
      CARGO_INCREMENTAL: '0' # https://doc.rust-lang.org/cargo/reference/profiles.html#incremental
      CARGO_PROFILE_RELEASE_LTO: 'true' # https://doc.rust-lang.org/cargo/reference/profiles.html#lto
      CARGO_PROFILE_RELEASE_OPT_LEVEL: '3' # https://doc.rust-lang.org/cargo/reference/profiles.html#opt-level
      CARGO_PROFILE_RELEASE_CODEGEN_UNITS: '1' # https://doc.rust-lang.org/cargo/reference/profiles.html#codegen-units
      CARGO_PROFILE_RELEASE_STRIP: 'true' # https://doc.rust-lang.org/cargo/reference/unstable.html#profile-strip-option
      RUSTC_WRAPPER: /home/circleci/.cargo/bin/sccache
  test-executor:
    docker:
      - image: candlecorp/ci-test:latest
        auth: *AUTH
    resource_class: xlarge
    environment:
      RUSTC_WRAPPER: sccache
      SCCACHE_AZURE_BLOB_CONTAINER: circleci-sccache
      SCCACHE_ERROR_LOG: /tmp/sccache.log
      CARGO_INCREMENTAL: '0' # https://doc.rust-lang.org/cargo/reference/profiles.html#incremental
      CARGO_PROFILE_TEST_LTO: 'off'
      CARGO_BUILD_JOBS: '4'
commands:
  install_deps:
    steps:
      - restore_cache:
          key: cross-{{ arch }}
      - run:
          name: Install cross
          command: |
            # if [[ ! $(command -v cross) ]]; then
              curl -OL https://github.com/wasmflow/cross/releases/download/v0.2.2-darwin/cross_v0.2.2-darwin_x86_64-unknown-linux-musl.tar.gz
              tar -zxvf cross_v0.2.2-darwin_x86_64-unknown-linux-musl.tar.gz cross
              chmod +x cross
              mv cross $HOME/.cargo/bin/
            # fi
            cross --version
      - save_cache:
          key: cross-{{ arch }}
          paths:
            - ~/.cargo/bin/cross
  sccache_setup:
    steps:
      - restore_cache:
          key: sccache-{{ arch }}
      - run:
          name: Sets up Sccache
          command: |
            [[ ! -f ${RUSTC_WRAPPER} ]] \
            && curl -L https://github.com/mozilla/sccache/releases/download/v0.3.0/sccache-v0.3.0-x86_64-unknown-linux-musl.tar.gz \
            | tar -zxvf - sccache-v0.3.0-x86_64-unknown-linux-musl/sccache \
            && sudo mv sccache-v0.3.0-x86_64-unknown-linux-musl/sccache ${RUSTC_WRAPPER} \
            && sudo chmod +x ${RUSTC_WRAPPER} || echo "${RUSTC_WRAPPER} already exists"
      - save_cache:
          key: sccache-{{ arch }}
          paths:
            - ~/.cargo/bin/sccache
  sccache_start:
    steps:
      - run:
          name: Starts Sccache
          command: |
            ${RUSTC_WRAPPER} -s
  rust_setup:
    description: Sets up Rust Toolchain
    steps:
      - restore_cache:
          key: rust-{{ arch }}
      - run:
          name: Sets up Rust Toolchain
          command: |
            if [[ ! $(command -v rustup) ]]; then
              curl "https://sh.rustup.rs" -o "/tmp/rust-init.sh"
              chmod +x "/tmp/rust-init.sh"
              /tmp/rust-init.sh -y --default-toolchain stable --no-modify-path --profile minimal -c rustfmt -c clippy
              source $HOME/.cargo/env
              echo 'source $HOME/.cargo/env' >> $HOME/.bashrc
            fi
            rustup --version
            cargo --version
            rustc --version
            rustup show home
      - save_cache:
          key: rust-{{ arch }}
          paths:
            - ~/.rustup
      - restore_build_cache
      - sccache_setup
      - sccache_start
  save_rustup_cache:
    description: Saves rust toolchain
    steps:
      - save_cache:
          key: rustup-{{checksum "rust-toolchain.toml"}}-{{ arch }}
          paths:
            - /usr/local/rustup/
  restore_rustup_cache:
    description: Restores rust toolchain
    steps:
      - restore_cache:
          key: rustup-{{checksum "rust-toolchain.toml"}}-{{ arch }}
  build_setup:
    description: Sets up environment for future jobs
    steps:
      - rust_setup
      - install_deps
  checkout_submodules:
    description: Checkout repo & submodules
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
  restore_build_cache:
    description: Restore cargo package cache for subsequent jobs
    steps:
      - run: mkdir -p project
      - restore_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}-{{ arch }}
  save_build_cache:
    description: Save cargo package cache for subsequent jobs
    steps:
      - save_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}-{{ arch }}
          paths:
            - ../.cache/sccache
            - ../.cargo/git
            - ../.cargo/registry
            - ../.cargo/.package-cache

jobs:
  scratch:
    docker:
      - image: candlecorp/ci-test:latest
        auth: *AUTH
    resource_class: small
    steps:
      - slack/notify:
          channel: wick-ci
          custom: Build ready
          event: pass
  test:
    executor: test-executor
    steps:
      - checkout_submodules
      - restore_rustup_cache
      - sccache_start
      - restore_build_cache
      - run:
          name: Test
          command: |-
            rustup show
            rustup --version
            cargo --version
            rustc --version
            rustup show home
            rustup default `tomlq -f rust-toolchain.toml toolchain.channel`
      - run:
          name: Test
          command: 'just unit-tests'
      - run: sccache -s
      - save_build_cache
      - save_rustup_cache
  build:
    parameters:
      arch:
        type: string
      release:
        type: boolean
        default: true
    executor: build-executor
    steps:
      - checkout_submodules
      - restore_rustup_cache
      - build_setup
      - restore_build_cache
      - run:
          name: Build
          command: |
            WICK_VERSION="<< pipeline.git.tag >>" WAFL_VERSION="<< pipeline.git.tag >>" ARCH=<<parameters.arch>> RELEASE=<<parameters.release>>  make bins
      - save_cache:
          key: artifacts-<<parameters.arch>>-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ./build/
      - save_build_cache
      - save_rustup_cache
  deploy:
    docker:
      - image: candlecorp/ci-deploy:latest
        auth: *AUTH
        environment:
          AZURE_STORAGE_ACCOUNT: $AZURE_STORAGE_ACCOUNT
    steps:
      - checkout
      - restore_cache:
          keys:
            - artifacts-x86_64-unknown-linux-gnu-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - artifacts-aarch64-unknown-linux-gnu-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - artifacts-x86_64-apple-darwin-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - artifacts-aarch64-apple-darwin-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - artifacts-x86_64-pc-windows-gnu-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Build archives
          command: |
            cd /home/circleci/project
            mkdir -p ./build/artifacts
            make-tarball wick ./build/x86_64-unknown-linux-gnu linux.x86_64 build/artifacts
            make-tarball wick ./build/aarch64-unknown-linux-gnu linux.aarch64 build/artifacts
            make-tarball wick ./build/x86_64-apple-darwin darwin.x86_64 build/artifacts
            make-tarball wick ./build/aarch64-apple-darwin darwin.aarch64 build/artifacts
            make-zip ./build/x86_64-pc-windows-gnu wick.win64 build/artifacts
            cp /home/candle/project/crates/wick/wick-rpc/proto/wick.proto build/artifacts/wick.proto
            cp /home/candle/project/crates/wick/wick-config/json-schema/manifest.json build/artifacts/manifest-schema.json
            BUILDTAG="nightly-$(date +%F)"
            echo $BUILDTAG > build/artifacts/RELEASE
            echo << pipeline.git.revision >> >> build/artifacts/RELEASE
      - run:
          name: Publish artifacts
          no_output_timeout: 2m
          command: |
            cd /home/circleci/project
            VERSION="<< pipeline.git.tag >>"
            echo $VERSION
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} build/artifacts/
      - store_artifacts:
          path: ./build/

workflows:
  test:
    jobs:
      - test:
          filters:
            branches:
              ignore: main
  deploy:
    jobs:
      - test:
          context: build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^r\d+$/
      - build:
          context: build
          matrix:
            parameters:
              arch: *ARCHITECTURES
            alias: release
          requires: [test]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^r\d+$/
      - deploy:
          context: build
          requires: [release]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^r\d+$/
