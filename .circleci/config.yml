version: 2.1
orbs:
  slack: circleci/slack@4.10.1

data:
  credentials:
    docker: &AUTH
      username: $DOCKERHUB_USER
      password: $DOCKERHUB_PASSWORD
  architectures: &ARCHITECTURES
    - x86_64-unknown-linux-gnu
    - aarch64-unknown-linux-gnu
    - x86_64-apple-darwin
    - aarch64-apple-darwin
    - x86_64-pc-windows-gnu

executors:
  build-executor:
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
    resource_class: large
    environment:
      RUSTC_WRAPPER: /home/circleci/.cargo/bin/sccache
      RUSTC_TOOLCHAIN: 1.56.0
      SCCACHE_AZURE_CONNECTION_STRING: $SCCACHE_AZURE_CONNECTION_STRING
      SCCACHE_AZURE_BLOB_CONTAINER: sccache
  test-executor:
    docker:
      - image: candlecorp/build-base:latest
        auth: *AUTH
    resource_class: large
    environment:
      CARGO_BUILD_JOBS: 4
      RUSTC_WRAPPER: sccache
      SCCACHE_AZURE_CONNECTION_STRING: $SCCACHE_AZURE_CONNECTION_STRING
      SCCACHE_AZURE_BLOB_CONTAINER: sccache

commands:
  install_deps:
    steps:
      - restore_cache:
          key: cross-{{ arch }}
      - run:
          name: Install cross
          command: |
            # if [[ ! $(command -v cross) ]]; then
              curl -OL https://github.com/wasmflow/cross/releases/download/v0.2.1-darwin/cross-v0.2.1-x86_64-unknown-linux-gnu.tar.gz
              tar -zxvf cross-v0.2.1-x86_64-unknown-linux-gnu.tar.gz cross
              chmod +x cross
              mv cross $HOME/.cargo/bin/
            # fi
            cross --version
      - save_cache:
          key: cross-{{ arch }}
          paths:
            - ~/.cargo/bin/cross
  sccache_setup:
    steps:
      - restore_cache:
          key: sccache-{{ arch }}
      - run:
          name: Sets up Sccache
          command: |
            [[ ! -f ${RUSTC_WRAPPER} ]] \
            && curl -L https://github.com/mozilla/sccache/releases/download/\
            v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz \
            | tar -zxvf - sccache-v0.2.15-x86_64-unknown-linux-musl/sccache \
            && sudo mv sccache-v0.2.15-x86_64-unknown-linux-musl/sccache ${RUSTC_WRAPPER} \
            && sudo chmod +x ${RUSTC_WRAPPER}
            sccache -s
      - save_cache:
          key: sccache-{{ arch }}
          paths:
            - ~/.cargo/bin/sccache
  rust_setup:
    description: Sets up Rust Toolchain
    steps:
      - restore_cache:
          key: rust-{{ arch }}
      - run:
          name: Sets up Rust Toolchain
          command: |
            if [[ ! $(command -v rustup) ]]; then
              curl "https://sh.rustup.rs" -o "/tmp/rust-init.sh"
              chmod +x "/tmp/rust-init.sh"
              /tmp/rust-init.sh -y --default-toolchain stable --no-modify-path --profile minimal -c rustfmt -c clippy
              source $HOME/.cargo/env
              echo 'source $HOME/.cargo/env' >> $HOME/.bashrc
            fi
            rustup --version
            cargo --version
            rustc --version
            rustup show home
      - save_cache:
          key: rust-{{ arch }}
          paths:
            - ~/.rustup
      - restore_build_cache
      - sccache_setup
  build_setup:
    description: Sets up environment for future jobs
    steps:
      - rust_setup
      - install_deps
  checkout_submodules:
    description: Checkout repo & submodules
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
  restore_build_cache:
    description: Restore cargo package cache for subsequent jobs
    steps:
      - run: mkdir -p project
      - restore_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}-{{ arch }}
  save_build_cache:
    description: Save cargo package cache for subsequent jobs
    steps:
      - save_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}-{{ arch }}
          paths:
            - ../.cache/sccache
            - ../.cargo/git
            - ../.cargo/registry
            - ../.cargo/.package-cache

jobs:
  scratch:
    docker:
      - image: candlecorp/build-base:latest
        auth: *AUTH
    resource_class: small
    steps:
      - slack/notify:
          channel: wasmflow-ci
          custom: Build ready
          event: pass
  test:
    executor: test-executor
    steps:
      - checkout_submodules
      - run: source ./etc/ci-test.env
      - restore_build_cache
      - run:
          name: Test
          command: "make test"
      - run: sccache -s
      - save_build_cache
  build:
    parameters:
      arch:
        type: string
      release:
        type: boolean
        default: true
    executor: build-executor
    steps:
      - checkout_submodules
      - build_setup
      - run: source ./etc/ci-build.env
      - restore_build_cache
      - run:
          name: Build
          command: |
            VERSION="nightly-$(date +%F)"
            WASMFLOW_VERSION=VERSION WAFL_VERSION=VERSION ARCH=<<parameters.arch>> RELEASE=<<parameters.release>>  make bins
      - save_cache:
          key: artifacts-<<parameters.arch>>-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ./build/
      - save_build_cache
  deploy:
    parameters:
    docker:
      - image: candlecorp/ci-env-dev
        auth: *AUTH
        environment:
          AZURE_STORAGE_ACCOUNT: $AZURE_STORAGE_ACCOUNT
    steps:
      - checkout
      - restore_cache:
          keys:
            - artifacts-x86_64-unknown-linux-gnu-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - artifacts-aarch64-unknown-linux-gnu-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - artifacts-x86_64-apple-darwin-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - artifacts-aarch64-apple-darwin-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - artifacts-x86_64-pc-windows-gnu-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Build archives
          command: |
            cd /home/circleci/project
            mkdir -p ./build/artifacts
            make-tarball wasmflow ./build/x86_64-unknown-linux-gnu linux.x86_64 build/artifacts
            make-tarball wasmflow ./build/aarch64-unknown-linux-gnu linux.aarch64 build/artifacts
            make-tarball wasmflow ./build/x86_64-apple-darwin darwin.x86_64 build/artifacts
            make-tarball wasmflow ./build/aarch64-apple-darwin darwin.aarch64 build/artifacts
            make-zip ./build/x86_64-pc-windows-gnu wasmflow.win64 build/artifacts
            cp /home/candle/project/crates/wasmflow/wasmflow-rpc/proto/wasmflow.proto build/artifacts/wasmflow.proto
            BUILDTAG="nightly-$(date +%F)"
            echo $BUILDTAG > build/artifacts/RELEASE
            echo << pipeline.git.revision	>> > build/artifacts/RELEASE
            cp build/artifacts/RELEASE build/RELEASE
      - run:
          name: Publish artifacts
          no_output_timeout: 2m
          command: |
            cd /home/circleci/project
            BUILDTAG="nightly-$(date +%F)"
            echo $BUILDTAG
            echo WIP
      - store_artifacts:
          path: ./build/

workflows:
  version: 2
  test:
    jobs:
      - test:
          context: build
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - test:
          context: build
      - build:
          context: build
          matrix:
            parameters:
              arch: *ARCHITECTURES
            alias: release
          requires: [test]
      - deploy:
          context: build
          requires: [release]
