// Code generated by @apexlang/codegen. DO NOT EDIT.

package blob

import (
	"github.com/nanobus/nanobus/pkg/actions"
	"github.com/nanobus/nanobus/pkg/expr"
	"github.com/nanobus/nanobus/pkg/resource"
)

// Reads data and decodes it from a Blob store.
type ReadConfig struct {
	// The blob store resource to read.
	Resource resource.Ref `json:"resource" yaml:"resource" msgpack:"resource" mapstructure:"resource" validate:"required"`
	// The key to read.
	Key *expr.ValueExpr `json:"key" yaml:"key" msgpack:"key" mapstructure:"key" validate:"required"`
	// Codec is the name of the codec to use for decoding.
	Codec string `json:"codec" yaml:"codec" msgpack:"codec" mapstructure:"codec" validate:"required"`
	// codecArgs are the arguments to pass to the decode function.
	CodecArgs  []interface{}   `json:"codecArgs,omitempty" yaml:"codecArgs,omitempty" msgpack:"codecArgs,omitempty" mapstructure:"codecArgs" validate:"dive"`
	Offset     *expr.ValueExpr `json:"offset,omitempty" yaml:"offset,omitempty" msgpack:"offset,omitempty" mapstructure:"offset"`
	Length     *expr.ValueExpr `json:"length,omitempty" yaml:"length,omitempty" msgpack:"length,omitempty" mapstructure:"length"`
	BufferSize uint32          `json:"bufferSize" yaml:"bufferSize" msgpack:"bufferSize" mapstructure:"bufferSize"`
}

func Read() (string, actions.Loader) {
	return "@blob/read", ReadLoader
}

// Encodes data and writes it to a Blob store.
type WriteConfig struct {
	// The blob store resource to write.
	Resource resource.Ref `json:"resource" yaml:"resource" msgpack:"resource" mapstructure:"resource" validate:"required"`
	// The key to write.
	Key *expr.ValueExpr `json:"key" yaml:"key" msgpack:"key" mapstructure:"key" validate:"required"`
	// The data to write.
	Data *expr.DataExpr `json:"data,omitempty" yaml:"data,omitempty" msgpack:"data,omitempty" mapstructure:"data"`
	// Codec is the name of the codec to use for decoding.
	Codec string `json:"codec" yaml:"codec" msgpack:"codec" mapstructure:"codec" validate:"required"`
	// codecArgs are the arguments to pass to the decode function.
	CodecArgs       []interface{} `json:"codecArgs,omitempty" yaml:"codecArgs,omitempty" msgpack:"codecArgs,omitempty" mapstructure:"codecArgs" validate:"dive"`
	DelimiterString *string       `json:"delimiterString,omitempty" yaml:"delimiterString,omitempty" msgpack:"delimiterString,omitempty" mapstructure:"delimiterString"`
	DelimiterBytes  []byte        `json:"delimiterBytes,omitempty" yaml:"delimiterBytes,omitempty" msgpack:"delimiterBytes,omitempty" mapstructure:"delimiterBytes"`
}

func Write() (string, actions.Loader) {
	return "@blob/write", WriteLoader
}
