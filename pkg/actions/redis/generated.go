// Code generated by @apexlang/codegen. DO NOT EDIT.

package redis

import (
	"github.com/nanobus/nanobus/pkg/actions"
	"github.com/nanobus/nanobus/pkg/expr"
)

type ResourceRef string

// TODO
type GetConfig struct {
	// Resource is the name of the connection resource to use.
	Resource ResourceRef `json:"resource" yaml:"resource" msgpack:"resource" mapstructure:"resource" validate:"required"`
	// Data is the input bindings sent.
	Key *expr.ValueExpr `json:"key" yaml:"key" msgpack:"key" mapstructure:"key" validate:"required"`
}

func Get() (string, actions.Loader) {
	return "@redis/get", GetLoader
}

type SetConfig struct {
	// Resource is the name of the connection resource to use.
	Resource ResourceRef `json:"resource" yaml:"resource" msgpack:"resource" mapstructure:"resource" validate:"required"`
	// Data is the input bindings sent.
	Key *expr.ValueExpr `json:"key" yaml:"key" msgpack:"key" mapstructure:"key" validate:"required"`
	// Data is the input bindings sent.
	Value *expr.DataExpr `json:"value" yaml:"value" msgpack:"value" mapstructure:"value" validate:"required"`
}

func Set() (string, actions.Loader) {
	return "@redis/set", SetLoader
}

type RemoveConfig struct {
	// Resource is the name of the connection resource to use.
	Resource ResourceRef `json:"resource" yaml:"resource" msgpack:"resource" mapstructure:"resource" validate:"required"`
	// Data is the input bindings sent.
	Key *expr.ValueExpr `json:"key" yaml:"key" msgpack:"key" mapstructure:"key" validate:"required"`
}

func Remove() (string, actions.Loader) {
	return "@redis/remove", RemoveLoader
}
